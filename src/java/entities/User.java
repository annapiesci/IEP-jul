package entities;
// Generated 15-Jul-2017 18:20:13 by Hibernate Tools 4.3.1


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name="user"
    ,catalog="pia1"
    , uniqueConstraints = {@UniqueConstraint(columnNames="email"), @UniqueConstraint(columnNames="username")} 
)
public class User  implements java.io.Serializable {


     private Integer idUser;
     private String name;
     private String surname;
     private String email;
     private String institution;
     private String username;
     private String password;
     private String confirmedPsw;
     private String gender;
     private String picture;
     private String shirtSize;
     private String linkedin;
     private String role;
     private Set favoritesForIdUser = new HashSet(0);
     private Set conferences = new HashSet(0);
     private Set conferences_1 = new HashSet(0);
     private Set favoritesForIdFavoriteUser = new HashSet(0);
     private Set messagesForIdUserFor = new HashSet(0);
     private Set messagesForIdUserFrom = new HashSet(0);

    public User() {
    }

	
    public User(String name, String surname, String email, String username, String password, String confirmedPsw) {
        this.name = name;
        this.surname = surname;
        this.email = email;
        this.username = username;
        this.password = password;
        this.confirmedPsw = confirmedPsw;
    }
    public User(String name, String surname, String email, String institution, String username, String password, String confirmedPsw, String gender, String picture, String shirtSize, String linkedin, String role, Set favoritesForIdUser, Set conferences, Set conferences_1, Set favoritesForIdFavoriteUser, Set messagesForIdUserFor, Set messagesForIdUserFrom) {
       this.name = name;
       this.surname = surname;
       this.email = email;
       this.institution = institution;
       this.username = username;
       this.password = password;
       this.confirmedPsw = confirmedPsw;
       this.gender = gender;
       this.picture = picture;
       this.shirtSize = shirtSize;
       this.linkedin = linkedin;
       this.role = role;
       this.favoritesForIdUser = favoritesForIdUser;
       this.conferences = conferences;
       this.conferences_1 = conferences_1;
       this.favoritesForIdFavoriteUser = favoritesForIdFavoriteUser;
       this.messagesForIdUserFor = messagesForIdUserFor;
       this.messagesForIdUserFrom = messagesForIdUserFrom;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="idUser", unique=true, nullable=false)
    public Integer getIdUser() {
        return this.idUser;
    }
    
    public void setIdUser(Integer idUser) {
        this.idUser = idUser;
    }

    
    @Column(name="name", nullable=false, length=60)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    
    @Column(name="surname", nullable=false, length=60)
    public String getSurname() {
        return this.surname;
    }
    
    public void setSurname(String surname) {
        this.surname = surname;
    }

    
    @Column(name="email", unique=true, nullable=false, length=60)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    
    @Column(name="institution", length=60)
    public String getInstitution() {
        return this.institution;
    }
    
    public void setInstitution(String institution) {
        this.institution = institution;
    }

    
    @Column(name="username", unique=true, nullable=false, length=45)
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }

    
    @Column(name="password", nullable=false, length=45)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    
    @Column(name="confirmedPSW", nullable=false, length=45)
    public String getConfirmedPsw() {
        return this.confirmedPsw;
    }
    
    public void setConfirmedPsw(String confirmedPsw) {
        this.confirmedPsw = confirmedPsw;
    }

    
    @Column(name="gender", length=1)
    public String getGender() {
        return this.gender;
    }
    
    public void setGender(String gender) {
        this.gender = gender;
    }

    
    @Column(name="picture", length=200)
    public String getPicture() {
        return this.picture;
    }
    
    public void setPicture(String picture) {
        this.picture = picture;
    }

    
    @Column(name="shirtSize", length=3)
    public String getShirtSize() {
        return this.shirtSize;
    }
    
    public void setShirtSize(String shirtSize) {
        this.shirtSize = shirtSize;
    }

    
    @Column(name="linkedin", length=200)
    public String getLinkedin() {
        return this.linkedin;
    }
    
    public void setLinkedin(String linkedin) {
        this.linkedin = linkedin;
    }

    
    @Column(name="role", length=1)
    public String getRole() {
        return this.role;
    }
    
    public void setRole(String role) {
        this.role = role;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByIdUser")
    public Set getFavoritesForIdUser() {
        return this.favoritesForIdUser;
    }
    
    public void setFavoritesForIdUser(Set favoritesForIdUser) {
        this.favoritesForIdUser = favoritesForIdUser;
    }

@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="attends", catalog="pia1", joinColumns = { 
        @JoinColumn(name="idUserFK", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="idConfFK", nullable=false, updatable=false) })
    public Set getConferences() {
        return this.conferences;
    }
    
    public void setConferences(Set conferences) {
        this.conferences = conferences;
    }

@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="moderator", catalog="pia1", joinColumns = { 
        @JoinColumn(name="idModerator", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="idConf", nullable=false, updatable=false) })
    public Set getConferences_1() {
        return this.conferences_1;
    }
    
    public void setConferences_1(Set conferences_1) {
        this.conferences_1 = conferences_1;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByIdFavoriteUser")
    public Set getFavoritesForIdFavoriteUser() {
        return this.favoritesForIdFavoriteUser;
    }
    
    public void setFavoritesForIdFavoriteUser(Set favoritesForIdFavoriteUser) {
        this.favoritesForIdFavoriteUser = favoritesForIdFavoriteUser;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByIdUserFor")
    public Set getMessagesForIdUserFor() {
        return this.messagesForIdUserFor;
    }
    
    public void setMessagesForIdUserFor(Set messagesForIdUserFor) {
        this.messagesForIdUserFor = messagesForIdUserFor;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByIdUserFrom")
    public Set getMessagesForIdUserFrom() {
        return this.messagesForIdUserFrom;
    }
    
    public void setMessagesForIdUserFrom(Set messagesForIdUserFrom) {
        this.messagesForIdUserFrom = messagesForIdUserFrom;
    }




}


